diff --git a/node_modules/reanimated-color-picker/lib/src/components/Sliders/HSB/RoehnSlider.tsx b/node_modules/reanimated-color-picker/lib/src/components/Sliders/HSB/RoehnSlider.tsx
new file mode 100644
index 0000000..68c4a38
--- /dev/null
+++ b/node_modules/reanimated-color-picker/lib/src/components/Sliders/HSB/RoehnSlider.tsx
@@ -0,0 +1,137 @@
+import React from 'react';
+import { StyleSheet } from 'react-native';
+import { Gesture, GestureDetector } from 'react-native-gesture-handler';
+import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
+
+import usePickerContext from '../../../AppContext';
+import Thumb from '../../Thumb/Thumb';
+import { clamp, ConditionalRendering, getStyle, HSVA2HSLA_string, isRtl } from '../../../utils';
+
+import type { RoehnSliderProps, SliderProps } from '../../../types';
+import type { LayoutChangeEvent } from 'react-native';
+import type { PanGestureHandlerEventPayload } from 'react-native-gesture-handler';
+
+export function RoehnSlider({ gestures = [], style = {}, vertical = false, reverse = false, gradient = undefined, ...props }: RoehnSliderProps) {
+  const { hueValue, saturationValue, brightnessValue, onGestureChange, onGestureEnd, ...ctx } = usePickerContext();
+
+  const thumbShape = props.thumbShape ?? ctx.thumbShape,
+    thumbSize = props.thumbSize ?? ctx.thumbSize,
+    thumbColor = props.thumbColor ?? ctx.thumbColor,
+    boundedThumb = props.boundedThumb ?? ctx.boundedThumb,
+    renderThumb = props.renderThumb ?? ctx.renderThumb,
+    thumbStyle = props.thumbStyle ?? ctx.thumbStyle ?? {},
+    thumbInnerStyle = props.thumbInnerStyle ?? ctx.thumbInnerStyle ?? {},
+    thumbScaleAnimationValue = props.thumbScaleAnimationValue ?? ctx.thumbScaleAnimationValue,
+    thumbScaleAnimationDuration = props.thumbScaleAnimationDuration ?? ctx.thumbScaleAnimationDuration,
+    adaptSpectrum = props.adaptSpectrum ?? ctx.adaptSpectrum,
+    sliderThickness = props.sliderThickness ?? ctx.sliderThickness;
+
+  const borderRadius = getStyle(style, 'borderRadius') ?? 5,
+    getWidth = getStyle(style, 'width'),
+    getHeight = getStyle(style, 'height');
+
+  const width = useSharedValue(vertical ? sliderThickness : typeof getWidth === 'number' ? getWidth : 0);
+  const height = useSharedValue(!vertical ? sliderThickness : typeof getHeight === 'number' ? getHeight : 0);
+  const handleScale = useSharedValue(1);
+
+  const handleStyle = useAnimatedStyle(() => {
+    const length = (vertical ? height.value : width.value) - (boundedThumb ? thumbSize : 0),
+      percent = (saturationValue.value / 100) * length,
+      pos = (reverse ? length - percent : percent) - (boundedThumb ? 0 : thumbSize / 2),
+      posY = vertical ? pos : height.value / 2 - thumbSize / 2,
+      posX = vertical ? width.value / 2 - thumbSize / 2 : pos;
+
+    return { transform: [{ translateY: posY }, { translateX: posX }, { scale: handleScale.value }] };
+  }, [width, height, saturationValue, handleScale]);
+
+  const activeColorStyle = useAnimatedStyle(() => {
+    return { backgroundColor: HSVA2HSLA_string(hueValue.value, 100, 100) };
+  }, [hueValue]);
+
+  const activeBrightnessStyle = useAnimatedStyle(() => {
+    if (!adaptSpectrum) return {};
+
+    return { backgroundColor: HSVA2HSLA_string(0, 0, 0, 1 - brightnessValue.value / 100) };
+  }, [adaptSpectrum, brightnessValue]);
+
+  const imageStyle = useAnimatedStyle(() => {
+    const imageRotate = vertical ? (reverse ? '270deg' : '90deg') : reverse ? '180deg' : '0deg';
+    const imageTranslateY = ((height.value - width.value) / 2) * ((reverse && isRtl) || (!reverse && !isRtl) ? 1 : -1);
+    return {
+      width: vertical ? height.value : '100%',
+      height: vertical ? width.value : '100%',
+      borderRadius,
+      transform: [
+        { rotate: imageRotate },
+        { translateX: vertical ? ((height.value - width.value) / 2) * (reverse ? -1 : 1) : 0 },
+        { translateY: vertical ? imageTranslateY : 0 },
+      ],
+    };
+  }, [width, height]);
+
+  const onGestureUpdate = ({ x, y }: PanGestureHandlerEventPayload) => {
+    'worklet';
+
+    const length = (vertical ? height.value : width.value) - (boundedThumb ? thumbSize : 0),
+      pos = clamp((vertical ? y : x) - (boundedThumb ? thumbSize / 2 : 0), length),
+      value = (pos / length) * 100,
+      newSaturationValue = reverse ? 100 - value : value;
+
+    if (saturationValue.value === newSaturationValue) return;
+
+    saturationValue.value = newSaturationValue;
+
+    onGestureChange();
+  };
+
+  const onGestureBegin = (event: PanGestureHandlerEventPayload) => {
+    'worklet';
+    handleScale.value = withTiming(thumbScaleAnimationValue, { duration: thumbScaleAnimationDuration });
+    onGestureUpdate(event);
+  };
+
+  const onGestureFinish = () => {
+    'worklet';
+    handleScale.value = withTiming(1, { duration: thumbScaleAnimationDuration });
+    onGestureEnd();
+  };
+
+  const pan = Gesture.Pan().onBegin(onGestureBegin).onUpdate(onGestureUpdate).onEnd(onGestureFinish);
+  const tap = Gesture.Tap().onEnd(onGestureFinish);
+  const longPress = Gesture.LongPress().onEnd(onGestureFinish);
+  const composed = Gesture.Simultaneous(Gesture.Exclusive(pan, tap, longPress), ...gestures);
+
+  const onLayout = ({ nativeEvent: { layout } }: LayoutChangeEvent) => {
+    if (!vertical) width.value = withTiming(layout.width, { duration: 5 });
+    if (vertical) height.value = withTiming(layout.height, { duration: 5 });
+  };
+
+  const thicknessStyle = vertical ? { width: sliderThickness } : { height: sliderThickness };
+
+  return (
+    <GestureDetector gesture={composed}>
+      <Animated.View
+        onLayout={onLayout}
+        style={[{ borderRadius }, style, { position: 'relative', borderWidth: 0, padding: 0 }, thicknessStyle, activeColorStyle]}
+      >
+        {gradient}
+        <ConditionalRendering if={adaptSpectrum}>
+          <Animated.View style={[{ borderRadius }, activeBrightnessStyle, StyleSheet.absoluteFillObject]} />
+        </ConditionalRendering>
+
+        <Thumb
+          channel='s'
+          thumbShape={thumbShape}
+          thumbSize={thumbSize}
+          thumbColor={thumbColor}
+          renderThumb={renderThumb}
+          innerStyle={thumbInnerStyle}
+          handleStyle={handleStyle}
+          style={thumbStyle}
+          adaptSpectrum={adaptSpectrum}
+          vertical={vertical}
+        />
+      </Animated.View>
+    </GestureDetector>
+  );
+}
diff --git a/node_modules/reanimated-color-picker/lib/src/index.ts b/node_modules/reanimated-color-picker/lib/src/index.ts
index 80884a9..bac1048 100644
--- a/node_modules/reanimated-color-picker/lib/src/index.ts
+++ b/node_modules/reanimated-color-picker/lib/src/index.ts
@@ -15,6 +15,7 @@ export { Panel5 } from './components/Panels/Panel5';
 
 export { HueSlider } from './components/Sliders/Hue/HueSlider';
 export { HueCircular } from './components/Sliders/Hue/HueCircular';
+export { RoehnSlider } from './components/Sliders/HSB/RoehnSlider';
 
 export { SaturationSlider } from './components/Sliders/HSB/SaturationSlider';
 export { BrightnessSlider } from './components/Sliders/HSB/BrightnessSlider';
diff --git a/node_modules/reanimated-color-picker/lib/src/types.ts b/node_modules/reanimated-color-picker/lib/src/types.ts
index 9f3a0b4..de26242 100644
--- a/node_modules/reanimated-color-picker/lib/src/types.ts
+++ b/node_modules/reanimated-color-picker/lib/src/types.ts
@@ -468,6 +468,11 @@ export interface Panel5Props {
   selectionStyle?: StyleProp<ViewStyle>;
 }
 
+export interface RoehnSliderProps extends SliderProps {
+  /** - The gradient component to be displayed on the slider. */
+  gradient?: React.ReactNode;
+}
+
 export interface SliderProps {
   /** - Slider's handle (thumb) size (height*width). */
   thumbSize?: number;
diff --git a/node_modules/reanimated-color-picker/lib/typescript/index.d.ts b/node_modules/reanimated-color-picker/lib/typescript/index.d.ts
index 5ce587e..bff453a 100644
--- a/node_modules/reanimated-color-picker/lib/typescript/index.d.ts
+++ b/node_modules/reanimated-color-picker/lib/typescript/index.d.ts
@@ -13,6 +13,7 @@ export { HueSlider } from './components/Sliders/Hue/HueSlider';
 export { HueCircular } from './components/Sliders/Hue/HueCircular';
 export { SaturationSlider } from './components/Sliders/HSB/SaturationSlider';
 export { BrightnessSlider } from './components/Sliders/HSB/BrightnessSlider';
+export { RoehnSlider } from './components/Sliders/HSB/RoehnSlider';
 export { LuminanceSlider } from './components/Sliders/HSL/LuminanceSlider';
 export { LuminanceCircular } from './components/Sliders/HSL/LuminanceCircular';
 export { HSLSaturationSlider } from './components/Sliders/HSL/HSLSaturationSlider';
